/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(16);
	module.exports = __webpack_require__(17);


/***/ },

/***/ 16:
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _PaginationLinks = __webpack_require__(17);

	var _PaginationLinks2 = _interopRequireDefault(_PaginationLinks);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* exported RStaticDataTable */

	/**
	 * This file contains React component for Static Data Table
	 *
	 * @author Loris Team
	 * @version 1.0.0
	 *
	 */

	/**
	 * Static Data Table component
	 * Displays a set of data that is receives via props.
	 */
	var StaticDataTable = function (_React$Component) {
	  _inherits(StaticDataTable, _React$Component);

	  function StaticDataTable(props) {
	    _classCallCheck(this, StaticDataTable);

	    var _this = _possibleConstructorReturn(this, (StaticDataTable.__proto__ || Object.getPrototypeOf(StaticDataTable)).call(this, props));

	    _this.state = {
	      PageNumber: 1,
	      SortColumn: -1,
	      SortOrder: 'ASC',
	      RowsPerPage: 20,
	      Hide: _this.props.Hide
	    };

	    _this.changePage = _this.changePage.bind(_this);
	    _this.setSortColumn = _this.setSortColumn.bind(_this);
	    _this.changeRowsPerPage = _this.changeRowsPerPage.bind(_this);
	    _this.downloadCSV = _this.downloadCSV.bind(_this);
	    _this.countFilteredRows = _this.countFilteredRows.bind(_this);
	    _this.toCamelCase = _this.toCamelCase.bind(_this);
	    _this.getSortedRows = _this.getSortedRows.bind(_this); //
	    _this.hasFilterKeyword = _this.hasFilterKeyword.bind(_this);
	    return _this;
	  }

	  _createClass(StaticDataTable, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      if (jQuery.fn.DynamicTable) {
	        if (this.props.freezeColumn) {
	          $("#dynamictable").DynamicTable({
	            freezeColumn: this.props.freezeColumn
	          });
	        } else {
	          $("#dynamictable").DynamicTable();
	        }
	        if (this.state.Hide.defaultColumn) {
	          $('#dynamictable').find('tbody td:eq(0)').hide();
	        }
	      }

	      // Retrieve module preferences
	      var modulePrefs = JSON.parse(localStorage.getItem('modulePrefs'));

	      // Init modulePrefs object
	      if (modulePrefs === null) {
	        modulePrefs = {};
	      }

	      // Init modulePrefs for current module
	      if (modulePrefs[loris.TestName] === undefined) {
	        modulePrefs[loris.TestName] = {};
	        modulePrefs[loris.TestName].rowsPerPage = this.state.RowsPerPage;
	      }

	      // Set rows per page
	      var rowsPerPage = modulePrefs[loris.TestName].rowsPerPage;
	      this.setState({
	        RowsPerPage: rowsPerPage
	      });

	      // Make prefs accesible within component
	      this.modulePrefs = modulePrefs;
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (jQuery.fn.DynamicTable) {
	        if (this.props.freezeColumn) {
	          $("#dynamictable").DynamicTable({
	            freezeColumn: this.props.freezeColumn
	          });
	        } else {
	          $("#dynamictable").DynamicTable();
	        }
	      }
	      if (this.props.onSort && (this.state.SortColumn !== prevState.SortColumn || this.state.SortOrder !== prevState.SortOrder)) {
	        var index = this.getSortedRows();
	        this.props.onSort(index, this.props.Data, this.props.Headers);
	      }
	    }
	  }, {
	    key: "changePage",
	    value: function changePage(pageNo) {
	      this.setState({
	        PageNumber: pageNo
	      });
	    }
	  }, {
	    key: "setSortColumn",
	    value: function setSortColumn(colNumber) {
	      return function (e) {
	        if (this.state.SortColumn === colNumber) {
	          this.setState({
	            SortOrder: this.state.SortOrder === 'ASC' ? 'DESC' : 'ASC'
	          });
	        } else {
	          this.setState({
	            SortColumn: colNumber
	          });
	        }
	      };
	    }
	  }, {
	    key: "changeRowsPerPage",
	    value: function changeRowsPerPage(val) {
	      var rowsPerPage = val.target.value;
	      var modulePrefs = this.modulePrefs;

	      // Save current selection
	      modulePrefs[loris.TestName].rowsPerPage = rowsPerPage;

	      // Update localstorage
	      localStorage.setItem('modulePrefs', JSON.stringify(modulePrefs));

	      this.setState({
	        RowsPerPage: rowsPerPage,
	        PageNumber: 1
	      });
	    }
	  }, {
	    key: "downloadCSV",
	    value: function downloadCSV(csvData) {
	      var csvworker = new Worker(loris.BaseURL + '/js/workers/savecsv.js');

	      csvworker.addEventListener('message', function (e) {
	        var dataURL = void 0;
	        var dataDate = void 0;
	        var link = void 0;
	        if (e.data.cmd === 'SaveCSV') {
	          dataDate = new Date().toISOString();
	          dataURL = window.URL.createObjectURL(e.data.message);
	          link = document.createElement("a");
	          link.download = "data-" + dataDate + ".csv";
	          link.type = "text/csv";
	          link.href = dataURL;
	          document.body.appendChild(link);
	          $(link)[0].click();
	          document.body.removeChild(link);
	        }
	      });
	      csvworker.postMessage({
	        cmd: 'SaveFile',
	        data: csvData,
	        headers: this.props.Headers,
	        identifiers: this.props.RowNameMap
	      });
	    }
	  }, {
	    key: "countFilteredRows",
	    value: function countFilteredRows() {
	      var useKeyword = false;
	      var filterMatchCount = 0;
	      var filterValuesCount = this.props.Filter ? Object.keys(this.props.Filter).length : 0;
	      var tableData = this.props.Data;
	      var headersData = this.props.Headers;

	      if (this.props.Filter.keyword) {
	        useKeyword = true;
	      }

	      if (useKeyword) {
	        filterValuesCount -= 1;
	      }

	      for (var i = 0; i < tableData.length; i++) {
	        var headerCount = 0;
	        var keywordMatch = 0;
	        for (var j = 0; j < headersData.length; j++) {
	          var data = tableData[i] ? tableData[i][j] : null;
	          if (this.hasFilterKeyword(headersData[j], data)) {
	            headerCount++;
	          }
	          if (useKeyword) {
	            if (this.hasFilterKeyword('keyword', data)) {
	              keywordMatch++;
	            }
	          }
	        }

	        if (headerCount === filterValuesCount && (useKeyword === true && keywordMatch > 0 || useKeyword === false && keywordMatch === 0)) {
	          filterMatchCount++;
	        }
	      }

	      var hasFilters = filterValuesCount !== 0;
	      if (filterMatchCount === 0 && hasFilters) {
	        return 0;
	      }

	      return filterMatchCount === 0 ? tableData.length : filterMatchCount;
	    }
	  }, {
	    key: "toCamelCase",
	    value: function toCamelCase(str) {
	      return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
	        if (Number(match) === 0) return "";
	        return index === 0 ? match.toLowerCase() : match.toUpperCase();
	      });
	    }
	  }, {
	    key: "getSortedRows",
	    value: function getSortedRows() {
	      var index = [];

	      for (var i = 0; i < this.props.Data.length; i += 1) {
	        var val = this.props.Data[i][this.state.SortColumn] || undefined;
	        // If SortColumn is equal to default No. column, set value to be
	        // index + 1
	        if (this.state.SortColumn === -1) {
	          val = i + 1;
	        }
	        var isString = typeof val === 'string' || val instanceof String;
	        var isNumber = !isNaN(val) && (typeof val === "undefined" ? "undefined" : _typeof(val)) !== 'object';

	        if (val === ".") {
	          // hack to handle non-existent items in DQT
	          val = null;
	        } else if (isNumber) {
	          // perform type conversion (from string to int/float)
	          val = Number(val);
	        } else if (isString) {
	          // if string with text convert to lowercase
	          val = val.toLowerCase();
	        } else {
	          val = undefined;
	        }

	        if (this.props.RowNameMap) {
	          index.push({ RowIdx: i, Value: val, Content: this.props.RowNameMap[i] });
	        } else {
	          index.push({ RowIdx: i, Value: val, Content: i + 1 });
	        }
	      }

	      index.sort(function (a, b) {
	        if (this.state.SortOrder === 'ASC') {
	          if (a.Value === b.Value) {
	            // If all values are equal, sort by rownum
	            if (a.RowIdx < b.RowIdx) return -1;
	            if (a.RowIdx > b.RowIdx) return 1;
	          }
	          // Check if null values
	          if (a.Value === null || typeof a.Value === 'undefined') return -1;
	          if (b.Value === null || typeof b.Value === 'undefined') return 1;

	          // Sort by value
	          if (a.Value < b.Value) return -1;
	          if (a.Value > b.Value) return 1;
	        } else {
	          if (a.Value === b.Value) {
	            // If all values are equal, sort by rownum
	            if (a.RowIdx < b.RowIdx) return 1;
	            if (a.RowIdx > b.RowIdx) return -1;
	          }
	          // Check if null values
	          if (a.Value === null || typeof a.Value === 'undefined') return 1;
	          if (b.Value === null || typeof b.Value === 'undefined') return -1;

	          // Sort by value
	          if (a.Value < b.Value) return 1;
	          if (a.Value > b.Value) return -1;
	        }
	        // They're equal..
	        return 0;
	      }.bind(this));
	      return index;
	    }

	    /**
	     * Searches for the filter keyword in the column cell
	     *
	     * Note: Search is case-insensitive.
	     *
	     * @param {string} headerData column name
	     * @param {string} data search string
	     * @return {boolean} true, if filter value is found to be a substring
	     * of one of the column values, false otherwise.
	     */

	  }, {
	    key: "hasFilterKeyword",
	    value: function hasFilterKeyword(headerData, data) {
	      var header = this.toCamelCase(headerData);
	      var filterData = null;
	      var exactMatch = false;
	      var result = false;
	      var searchKey = null;
	      var searchString = null;

	      if (this.props.Filter[header]) {
	        filterData = this.props.Filter[header].value;
	        exactMatch = this.props.Filter[header].exactMatch;
	      }

	      // Handle null inputs
	      if (filterData === null || data === null) {
	        return false;
	      }

	      // Handle numeric inputs
	      if (typeof filterData === 'number') {
	        var intData = Number.parseInt(data, 10);
	        result = filterData === intData;
	      }

	      // Handle string inputs
	      if (typeof filterData === 'string') {
	        searchKey = filterData.toLowerCase();
	        searchString = data.toLowerCase();

	        if (exactMatch) {
	          result = searchString === searchKey;
	        } else {
	          result = searchString.indexOf(searchKey) > -1;
	        }
	      }

	      // Handle array inputs for multiselects
	      if ((typeof filterData === "undefined" ? "undefined" : _typeof(filterData)) === 'object') {
	        var match = false;
	        for (var i = 0; i < filterData.length; i += 1) {
	          searchKey = filterData[i].toLowerCase();
	          searchString = data.toLowerCase();

	          match = searchString.indexOf(searchKey) > -1;
	          if (match) {
	            result = true;
	          }
	        }
	      }
	      return result;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      if (this.props.Data === null || this.props.Data.length === 0) {
	        return React.createElement(
	          "div",
	          { className: "alert alert-info no-result-found-panel" },
	          React.createElement(
	            "strong",
	            null,
	            "No result found."
	          )
	        );
	      }
	      var rowsPerPage = this.state.RowsPerPage;
	      var headers = this.state.Hide.defaultColumn === true ? [] : [React.createElement(
	        "th",
	        { key: "th_col_0", onClick: this.setSortColumn(-1).bind(this) },
	        this.props.RowNumLabel
	      )];

	      for (var i = 0; i < this.props.Headers.length; i += 1) {
	        if (typeof loris.hiddenHeaders === "undefined" || loris.hiddenHeaders.indexOf(this.props.Headers[i]) === -1) {
	          var colIndex = i + 1;
	          if (this.props.Headers[i] === this.props.freezeColumn) {
	            headers.push(React.createElement(
	              "th",
	              { key: "th_col_" + colIndex, id: this.props.freezeColumn,
	                onClick: this.setSortColumn(i).bind(this) },
	              this.props.Headers[i]
	            ));
	          } else {
	            headers.push(React.createElement(
	              "th",
	              { key: "th_col_" + colIndex, onClick: this.setSortColumn(i).bind(this) },
	              this.props.Headers[i]
	            ));
	          }
	        }
	      }
	      var rows = [];
	      var curRow = [];
	      var index = this.getSortedRows();
	      var matchesFound = 0; // Keeps track of how many rows where displayed so far across all pages
	      var filteredRows = this.countFilteredRows();
	      var currentPageRow = rowsPerPage * (this.state.PageNumber - 1);
	      var filteredData = [];
	      var useKeyword = false;

	      if (this.props.Filter.keyword) {
	        useKeyword = true;
	      }

	      // Push rows to data table
	      for (var _i = 0; _i < this.props.Data.length && rows.length < rowsPerPage; _i++) {
	        curRow = [];

	        // Counts filter matches
	        var filterMatchCount = 0;
	        var keywordMatch = 0;
	        var filterLength = 0;

	        // Iterates through headers to populate row columns
	        // with corresponding data
	        for (var j = 0; j < this.props.Headers.length; j += 1) {
	          var data = "Unknown";

	          // Set column data
	          if (this.props.Data[index[_i].RowIdx]) {
	            data = this.props.Data[index[_i].RowIdx][j];
	          }

	          if (this.hasFilterKeyword(this.props.Headers[j], data)) {
	            filterMatchCount++;
	            filteredData.push(this.props.Data[index[_i].RowIdx]);
	          }

	          if (useKeyword === true) {
	            filterLength = Object.keys(this.props.Filter).length - 1;
	            if (this.hasFilterKeyword('keyword', data)) {
	              keywordMatch++;
	            }
	          } else {
	            filterLength = Object.keys(this.props.Filter).length;
	          }

	          var key = 'td_col_' + j;

	          // Get custom cell formatting if available
	          if (this.props.getFormattedCell) {
	            data = this.props.getFormattedCell(this.props.Headers[j], data, this.props.Data[index[_i].RowIdx], this.props.Headers);
	            if (data !== null) {
	              // Note: Can't currently pass a key, need to update columnFormatter
	              // to not return a <td> node. Using createFragment instead.
	              curRow.push(React.addons.createFragment({ data: data }));
	            }
	          } else {
	            curRow.push(React.createElement(
	              "td",
	              { key: key },
	              data
	            ));
	          }
	        }

	        // Only display a row if all filter values have been matched
	        if (filterLength === filterMatchCount && (useKeyword === true && keywordMatch > 0 || useKeyword === false && keywordMatch === 0)) {
	          matchesFound++;
	          if (matchesFound > currentPageRow) {
	            var rowIndex = index[_i].Content;
	            rows.push(React.createElement(
	              "tr",
	              { key: 'tr_' + rowIndex, colSpan: headers.length },
	              React.createElement(
	                "td",
	                null,
	                rowIndex
	              ),
	              curRow
	            ));
	          }
	        }
	      }

	      var RowsPerPageDropdown = React.createElement(
	        "select",
	        {
	          className: "input-sm perPage",
	          onChange: this.changeRowsPerPage,
	          value: this.state.RowsPerPage
	        },
	        React.createElement(
	          "option",
	          null,
	          "20"
	        ),
	        React.createElement(
	          "option",
	          null,
	          "50"
	        ),
	        React.createElement(
	          "option",
	          null,
	          "100"
	        ),
	        React.createElement(
	          "option",
	          null,
	          "1000"
	        ),
	        React.createElement(
	          "option",
	          null,
	          "5000"
	        ),
	        React.createElement(
	          "option",
	          null,
	          "10000"
	        )
	      );

	      // Include only filtered data if filters were applied
	      var csvData = this.props.Data;
	      if (this.props.Filter && filteredData.length > 0) {
	        csvData = filteredData;
	      }

	      var header = this.state.Hide.rowsPerPage === true ? '' : React.createElement(
	        "div",
	        { className: "table-header panel-heading" },
	        React.createElement(
	          "div",
	          { className: "row" },
	          React.createElement(
	            "div",
	            { className: "col-xs-12" },
	            rows.length,
	            " rows displayed of ",
	            filteredRows,
	            ". (Maximum rows per page: ",
	            RowsPerPageDropdown,
	            ")",
	            React.createElement(
	              "div",
	              { className: "pull-right" },
	              React.createElement(_PaginationLinks2.default, {
	                Total: filteredRows,
	                onChangePage: this.changePage,
	                RowsPerPage: rowsPerPage,
	                Active: this.state.PageNumber
	              })
	            )
	          )
	        )
	      );

	      var footer = this.state.Hide.downloadCSV === true ? '' : React.createElement(
	        "div",
	        { className: "panel-footer table-footer" },
	        React.createElement(
	          "div",
	          { className: "row" },
	          React.createElement(
	            "div",
	            { className: "col-xs-12" },
	            React.createElement(
	              "div",
	              { className: "col-xs-12 footerText" },
	              rows.length,
	              " rows displayed of ",
	              filteredRows,
	              ". (Maximum rows per page: ",
	              RowsPerPageDropdown,
	              ")"
	            ),
	            React.createElement(
	              "div",
	              { className: "col-xs-6" },
	              React.createElement(
	                "button",
	                {
	                  className: "btn btn-primary downloadCSV",
	                  onClick: this.downloadCSV.bind(null, csvData)
	                },
	                "Download Table as CSV"
	              )
	            ),
	            React.createElement(
	              "div",
	              { className: "pull-right" },
	              React.createElement(_PaginationLinks2.default, {
	                Total: filteredRows,
	                onChangePage: this.changePage,
	                RowsPerPage: rowsPerPage,
	                Active: this.state.PageNumber
	              })
	            )
	          )
	        )
	      );

	      return React.createElement(
	        "div",
	        { className: "panel panel-default" },
	        header,
	        React.createElement(
	          "table",
	          { className: "table table-hover table-primary table-bordered",
	            id: "dynamictable"
	          },
	          React.createElement(
	            "thead",
	            null,
	            React.createElement(
	              "tr",
	              { className: "info" },
	              headers
	            )
	          ),
	          React.createElement(
	            "tbody",
	            null,
	            rows
	          )
	        ),
	        footer
	      );
	    }
	  }]);

	  return StaticDataTable;
	}(React.Component);

	StaticDataTable.propTypes = {
	  Headers: React.PropTypes.array.isRequired,
	  Data: React.PropTypes.array.isRequired,
	  RowNumLabel: React.PropTypes.string,
	  // Function of which returns a JSX element for a table cell, takes
	  // parameters of the form: func(ColumnName, CellData, EntireRowData)
	  getFormattedCell: React.PropTypes.func,
	  onSort: React.PropTypes.func,
	  Hide: React.PropTypes.object
	};
	StaticDataTable.defaultProps = {
	  Headers: [],
	  Data: {},
	  RowNumLabel: 'No.',
	  Filter: {},
	  Hide: {
	    rowsPerPage: false,
	    downloadCSV: false,
	    defaultColumn: false
	  }
	};

	var RStaticDataTable = React.createFactory(StaticDataTable);

	window.StaticDataTable = StaticDataTable;
	window.RStaticDataTable = RStaticDataTable;

	exports.default = StaticDataTable;

/***/ },

/***/ 17:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/* exported RPaginationLinks */

	var PaginationLinks = React.createClass({
	  displayName: "PaginationLinks",

	  mixins: [React.addons.PureRenderMixin],
	  propTypes: {
	    onChangePage: React.PropTypes.func,
	    Total: React.PropTypes.number.isRequired
	  },
	  getDefaultProps: function getDefaultProps() {
	    return {
	      RowsPerPage: 10,
	      Active: 1
	    };
	  },
	  changePage: function changePage(i) {
	    var that = this;
	    return function (evt) {
	      // Don't jump to the top of the page
	      evt.preventDefault();

	      if (that.props.onChangePage) {
	        that.props.onChangePage(i);
	      }
	    };
	  },
	  render: function render() {
	    var rowsPerPage = this.props.RowsPerPage;
	    var pageLinks = [];
	    var classList;
	    var lastPage = Math.ceil(this.props.Total / rowsPerPage);
	    var startPage = Math.max(1, this.props.Active - 3);
	    var lastShownPage = Math.min(this.props.Active + 3, lastPage);

	    if (this.props.Total === 0) {
	      return React.createElement("div", null);
	    }
	    if (this.props.Total < this.props.RowsPerPage) {
	      return React.createElement("div", null);
	    }

	    if (lastShownPage - startPage <= 7) {
	      lastShownPage = startPage + 6;
	      if (lastShownPage > lastPage) {
	        lastShownPage = lastPage;
	        startPage = lastPage - 6;
	      }
	    }

	    if (startPage > 1) {
	      pageLinks.push(React.createElement(
	        "li",
	        { onClick: this.changePage(1) },
	        React.createElement(
	          "a",
	          { href: "#" },
	          "\xAB"
	        )
	      ));
	    }
	    if (startPage < 1) {
	      startPage = 1;
	    }
	    if (lastShownPage < 1) {
	      lastShownPage = 1;
	    }

	    // If there is only 1 page, don't display pagination links
	    if (startPage === lastShownPage) {
	      return React.createElement("div", null);
	    }

	    for (var i = startPage; i <= lastShownPage; i += 1) {
	      classList = '';
	      if (this.props.Active === i) {
	        classList = "active";
	      }
	      pageLinks.push(React.createElement(
	        "li",
	        { key: "table_page_" + i, onClick: this.changePage(i), className: classList },
	        React.createElement(
	          "a",
	          { href: "#" },
	          i
	        )
	      ));
	    }
	    if (lastShownPage !== lastPage) {
	      pageLinks.push(React.createElement(
	        "li",
	        { key: "table_page_more", onClick: this.changePage(lastPage) },
	        React.createElement(
	          "a",
	          { href: "#" },
	          "\xBB"
	        )
	      ));
	    }
	    return React.createElement(
	      "ul",
	      { className: "pagination pagination-table" },
	      pageLinks
	    );
	  }
	});

	var RPaginationLinks = React.createFactory(PaginationLinks);

	window.PaginationLinks = PaginationLinks;
	window.RPaginationLinks = RPaginationLinks;

	exports.default = PaginationLinks;

/***/ }

/******/ });